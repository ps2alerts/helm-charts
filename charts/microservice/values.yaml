namespace: ps2alerts
environment: production

common:
  name: ps2alerts-microservice
  hostname: foo.com

application:
  port: 3000
  version: v1.2.3

service:
  enabled: false
  prometheusMonitoring: false
  backendTarget: ps2alerts-microservice-0

ingress:
  enabled: false
  wwwRedirect: false
  extraHosts: {}

# Due to wonkyness, we have to indent the values of the snippets 4 times more than normal
#  annotations: |
#    nginx.ingress.kubernetes.io/server-snippet: |
#          expires 1d;
#          add_header Cache-Control "public, must-revalidate";

# Welcome to the glorious hacks we have to do to get multiple deployments in one helm chart! No we can't use arrays. No we can't use dict based defaults. I've tried it all, this is the only solution that works >:(
deployments:
  one:
    index: 0
    enabled: true
    replicas: 1
    containerImage: foo
    resources:
      cpu:
        limits: 200m
        requests: 50m
      mem:
        limits: 256Mi
        requests: 256Mi
    probes:
      startupProbe:
        enabled: false
        type: httpGet # httpGet | command
        command: 'foo-bar' # If type = command
        httpGetPath: / # If httpGet is used
        initialDelaySeconds: 5
        periodSeconds: 5
        failureThreshold: 6
      readinessProbe:
        enabled: false
        type: httpGet # httpGet | command
        command: 'foo-bar' # If type = command
        httpGetPath: / # If httpGet is used
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        failureThreshold: 3
      livenessProbe:
        enabled: false
        type: httpGet # httpGet | command
        command: 'foo-bar' # If type = command
        httpGetPath: / # If httpGet is used
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        failureThreshold: 1
    env: {}
    nodeSelector: {}
    scaling:
      enabled: false
  two:
    index: 1
    enabled: false
    replicas: 1
    containerImage: foo
    resources:
      cpu:
        limits: 200m
        requests: 50m
      mem:
        limits: 256Mi
        requests: 256Mi
    probes:
      startupProbe:
        enabled: false
        type: httpGet # httpGet | command
        command: 'foo-bar' # If type = command
        httpGetPath: / # If httpGet is used
        periodSeconds: 5
        successThreshold: 2
        failureThreshold: 6
      readinessProbe:
        enabled: false
        type: httpGet # httpGet | command
        command: 'foo-bar' # If type = command
        httpGetPath: / # If httpGet is used
        periodSeconds: 10
        successThreshold: 1
        failureThreshold: 3
      livenessProbe:
        enabled: false
        type: httpGet # httpGet | command
        command: 'foo-bar' # If type = command
        httpGetPath: / # If httpGet is used
        periodSeconds: 10
        successThreshold: 1
        failureThreshold: 1
    env: {}
    nodeSelector: {}
    scaling:
      enabled: false
  three:
    index: 2
    enabled: false
    replicas: 1
    containerImage: foo
    resources:
      cpu:
        limits: 200m
        requests: 50m
      mem:
        limits: 256Mi
        requests: 256Mi
    probes:
      startupProbe:
        enabled: false
        type: httpGet # httpGet | command
        command: 'foo-bar' # If type = command
        httpGetPath: / # If httpGet is used
        periodSeconds: 5
        successThreshold: 2
        failureThreshold: 6
      readinessProbe:
        enabled: false
        type: httpGet # httpGet | command
        command: 'foo-bar' # If type = command
        httpGetPath: / # If httpGet is used
        periodSeconds: 10
        successThreshold: 1
        failureThreshold: 3
      livenessProbe:
        enabled: false
        type: httpGet # httpGet | command
        command: 'foo-bar' # If type = command
        httpGetPath: / # If httpGet is used
        periodSeconds: 10
        successThreshold: 1
        failureThreshold: 1
    env: {}
    nodeSelector: {}
    scaling:
      enabled: false

